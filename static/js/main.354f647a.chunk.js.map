{"version":3,"sources":["component/card/card.component.jsx","component/card-list/card-list.component.jsx","component/search-box/search-box.component.jsx","App.js","serviceWorker.js","index.js"],"names":["Card","props","className","width","alt","src","addressbook","image","first_name","last_name","email","phone","address","suite","street","city","zipcode","CardList","map","key","id","SearchBox","placeholder","handleChange","type","onChange","App","e","setState","searchField","target","value","state","fetch","then","response","json","contacts","this","filteredaddressbook","filter","name","toLowerCase","includes","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"mVAIaA,G,iBAAO,SAACC,GAAD,OACnB,yBAAKC,UAAU,kBACd,yBAAKC,MAAM,MAAMC,IAAI,cAAcC,IAAG,mBAAcJ,EAAMK,YAAYC,SACtE,4BACEN,EAAMK,YAAYE,WADpB,IACiCP,EAAMK,YAAYG,UADnD,IAC8D,6BAD9D,UAESR,EAAMK,YAAYI,OAE3B,4BACC,sCAAYT,EAAMK,YAAYK,OAC9B,sCAAYV,EAAMK,YAAYM,QAAQC,MAAtC,KACA,uCAAaZ,EAAMK,YAAYM,QAAQE,OAAvC,KACA,qCAAWb,EAAMK,YAAYM,QAAQG,KAArC,KACA,oCAAUd,EAAMK,YAAYM,QAAQI,aCV1BC,EAAW,SAAChB,GAAD,OACvB,yBAAKC,UAAU,aACbD,EAAMK,YAAYY,KAAI,SAACZ,GAAD,OAAiB,kBAAC,EAAD,CAAMa,IAAKb,EAAYc,GAAId,YAAaA,SCLrEe,G,MAAY,SAAC,GAAD,IAAGC,EAAH,EAAGA,YAAaC,EAAhB,EAAgBA,aAAhB,OACxB,2BAAOrB,UAAU,SAASsB,KAAK,SAASF,YAAaA,EAAaG,SAAUF,MC4C9DG,E,YArCd,aAAe,IAAD,8BACb,+CAiBDH,aAAe,SAACI,GACf,EAAKC,SAAS,CAAEC,YAAaF,EAAEG,OAAOC,SAjBtC,EAAKC,MAAQ,CACZ1B,YAAa,GACbuB,YAAa,IAJD,E,iFAWO,IAAD,OAEnBI,MAAM,sBAAsBC,MAAK,SAACC,GAAD,OAAcA,EAASC,UAAQF,MAAK,SAACG,GACrE,EAAKT,SAAS,CAAEtB,YAAa+B,S,+BAQrB,IAAD,EAC6BC,KAAKN,MAAlC1B,EADA,EACAA,YAAauB,EADb,EACaA,YACfU,EAAsBjC,EAAYkC,QAAO,SAAClC,GAAD,OAC9CA,EAAYmC,KAAKC,cAAcC,SAASd,EAAYa,kBAErD,OACC,yBAAKxC,UAAU,OACd,qDACA,kBAAC,EAAD,CAAWoB,YAAY,cAAcC,aAAce,KAAKf,eACxD,kBAAC,EAAD,CAAUjB,YAAaiC,S,GAhCTK,aCEEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBtB,MAAK,SAAAuB,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.354f647a.chunk.js","sourcesContent":["import React from 'react';\nimport '../card-list/card-list.styles.css';\nimport './card.styles.css';\n\nexport const Card = (props) => (\n\t<div className=\"card-container\">\n\t\t<img width=\"100\" alt=\"addressbook\" src={`./images/${props.addressbook.image}`} />\n\t\t<h4>\n\t\t\t{props.addressbook.first_name} {props.addressbook.last_name} <br />\n\t\t\tEmail: {props.addressbook.email}\n\t\t</h4>\n\t\t<ul>\n\t\t\t<li>Phone: {props.addressbook.phone}</li>\n\t\t\t<li>Suite: {props.addressbook.address.suite} </li>\n\t\t\t<li>Street: {props.addressbook.address.street} </li>\n\t\t\t<li>City: {props.addressbook.address.city} </li>\n\t\t\t<li>Zip: {props.addressbook.address.zipcode}</li>\n\t\t</ul>\n\t</div>\n);\n","import React from 'react';\n\nimport { Card } from '../card/card.component';\n\nimport './card-list.styles.css';\n\nexport const CardList = (props) => (\n\t<div className=\"card-list\">\n\t\t{props.addressbook.map((addressbook) => <Card key={addressbook.id} addressbook={addressbook} />)}\n\t</div>\n);\n","import React from 'react';\nimport './search-box.styles.css';\n\nexport const SearchBox = ({ placeholder, handleChange }) => (\n\t<input className=\"search\" type=\"search\" placeholder={placeholder} onChange={handleChange} />\n);\n","import React, { Component } from 'react';\n\nimport './App.css';\n\nimport { CardList } from './component/card-list/card-list.component';\n//import { CardNew } from './component/card/card-new';\n//import { NewContact } from './component/card/newcontact';\n\nimport { SearchBox } from './component/search-box/search-box.component';\n\nclass App extends Component {\n\tconstructor() {\n\t\tsuper();\n\t\tthis.state = {\n\t\t\taddressbook: [],\n\t\t\tsearchField: ''\n\t\t};\n\n\t\t// use arrow function\n\t\t//this.handleChange = this.handleChange.bind(this);\n\t}\n\n\tcomponentDidMount() {\n\t\t// console.log(users);\n\t\tfetch('./addressbook.json').then((response) => response.json()).then((contacts) => {\n\t\t\tthis.setState({ addressbook: contacts });\n\t\t});\n\t}\n\n\thandleChange = (e) => {\n\t\tthis.setState({ searchField: e.target.value });\n\t};\n\n\trender() {\n\t\tconst { addressbook, searchField } = this.state;\n\t\tconst filteredaddressbook = addressbook.filter((addressbook) =>\n\t\t\taddressbook.name.toLowerCase().includes(searchField.toLowerCase())\n\t\t);\n\t\treturn (\n\t\t\t<div className=\"App\">\n\t\t\t\t<h1>Arvind's Address book</h1>\n\t\t\t\t<SearchBox placeholder=\"search name\" handleChange={this.handleChange} />\n\t\t\t\t<CardList addressbook={filteredaddressbook} />\n\t\t\t</div>\n\t\t);\n\t}\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}